%% File : BBB_Driver_Compass_HMC5883L.tlc
%% Created: Sun Dec 14 05:08:04 2014
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "BBB_Driver_Compass_HMC5883L.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  BBB_Driver_Compass_HMC5883L "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
    
  extern void BBB_Driver_Compass_HMC5883L_Outputs_wrapper(real_T *outMagField_HX,
                          real_T *outMagField_HY,
                          real_T *outMagField_HZ,
                          real_T *outMagField_HE,
                          real_T *outMagField_Heading,
                          real_T *outSimStop ,
			      const real_T  *xD,
                          const uint8_T  *prmI2C_DeviceNo, const int_T  p_width0, 
                          const uint8_T  *prmI2C_BusNo, const int_T  p_width1, 
                          const uint8_T  *prmCompass_DataOutAvrg, const int_T  p_width2, 
                          const uint8_T  *prmCompass_DataOutRate, const int_T  p_width3, 
                          const uint8_T  *prmCompass_MeasureMode, const int_T  p_width4, 
                          const uint8_T  *prmCompass_GainValue, const int_T  p_width5, 
                          const uint8_T  *prmCompass_OpMode, const int_T  p_width6, 
                          const uint8_T  *prmCompass_HeadingMode, const int_T  p_width7, 
                          const real_T  *prmCompass_HeadingOffset, const int_T  p_width8, 
                          const real_T  *prmCompass_DeclinationAng, const int_T  p_width9, 
                          const boolean_T  *prmCompass_SelfTest, const int_T  p_width10, 
                          const uint8_T  *prmCompass_SelfTest_GainValue, const int_T  p_width11, 
                          const uint8_T  *prmDebug_InfoLevel, const int_T p_width12);
  extern void BBB_Driver_Compass_HMC5883L_Update_wrapper(const real_T *outMagField_HX,
                          const real_T *outMagField_HY,
                          const real_T *outMagField_HZ,
                          const real_T *outMagField_HE,
                          const real_T *outMagField_Heading,
                          const real_T *outSimStop ,
                          real_T *xD, 
                          const uint8_T  *prmI2C_DeviceNo,  const int_T  p_width0,
                          const uint8_T  *prmI2C_BusNo,  const int_T  p_width1,
                          const uint8_T  *prmCompass_DataOutAvrg,  const int_T  p_width2,
                          const uint8_T  *prmCompass_DataOutRate,  const int_T  p_width3,
                          const uint8_T  *prmCompass_MeasureMode,  const int_T  p_width4,
                          const uint8_T  *prmCompass_GainValue,  const int_T  p_width5,
                          const uint8_T  *prmCompass_OpMode,  const int_T  p_width6,
                          const uint8_T  *prmCompass_HeadingMode,  const int_T  p_width7,
                          const real_T  *prmCompass_HeadingOffset,  const int_T  p_width8,
                          const real_T  *prmCompass_DeclinationAng,  const int_T  p_width9,
                          const boolean_T  *prmCompass_SelfTest,  const int_T  p_width10,
                          const uint8_T  *prmCompass_SelfTest_GainValue,  const int_T  p_width11,
                           const uint8_T *prmDebug_InfoLevel, const int_T  p_width12);
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
 %%
 %function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
  {

   real_T initVector[2] = {0,0};
   %assign rollVars = ["<dwork>/DSTATE"]
   %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
   %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
     %if %<LibBlockDWorkWidth(DSTATE)> == 1
       %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
      %else
       %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
      %endif
   %endroll
  }
  
 %endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]
  %if (param_width6) > 1
     %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
   %else
     %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
   %endif
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]
  %if (param_width7) > 1
     %assign pp7 = LibBlockMatrixParameterBaseAddr(P7)
   %else
     %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
   %endif
  %assign nelements8 = LibBlockParameterSize(P8)
  %assign param_width8 = nelements8[0] * nelements8[1]
  %if (param_width8) > 1
     %assign pp8 = LibBlockMatrixParameterBaseAddr(P8)
   %else
     %assign pp8 = LibBlockParameterAddr(P8, "", "", 0)
   %endif
  %assign nelements9 = LibBlockParameterSize(P9)
  %assign param_width9 = nelements9[0] * nelements9[1]
  %if (param_width9) > 1
     %assign pp9 = LibBlockMatrixParameterBaseAddr(P9)
   %else
     %assign pp9 = LibBlockParameterAddr(P9, "", "", 0)
   %endif
  %assign nelements10 = LibBlockParameterSize(P10)
  %assign param_width10 = nelements10[0] * nelements10[1]
  %if (param_width10) > 1
     %assign pp10 = LibBlockMatrixParameterBaseAddr(P10)
   %else
     %assign pp10 = LibBlockParameterAddr(P10, "", "", 0)
   %endif
  %assign nelements11 = LibBlockParameterSize(P11)
  %assign param_width11 = nelements11[0] * nelements11[1]
  %if (param_width11) > 1
     %assign pp11 = LibBlockMatrixParameterBaseAddr(P11)
   %else
     %assign pp11 = LibBlockParameterAddr(P11, "", "", 0)
   %endif
  %assign nelements12 = LibBlockParameterSize(P12)
  %assign param_width12 = nelements12[0] * nelements12[1]
  %if (param_width12) > 1
     %assign pp12 = LibBlockMatrixParameterBaseAddr(P12)
   %else
     %assign pp12 = LibBlockParameterAddr(P12, "", "", 0)
   %endif
  %assign nelements13 = LibBlockParameterSize(P13)
  %assign param_width13 = nelements13[0] * nelements13[1]
  %if (param_width13) > 1
     %assign pp13 = LibBlockMatrixParameterBaseAddr(P13)
   %else
     %assign pp13 = LibBlockParameterAddr(P13, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  BBB_Driver_Compass_HMC5883L_Outputs_wrapper( %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>,  %<pxd>,  %<pp1>, %<param_width1>,  %<pp2>, %<param_width2>,  %<pp3>, %<param_width3>,  %<pp4>, %<param_width4>,  %<pp5>, %<param_width5>,  %<pp6>, %<param_width6>,  %<pp7>, %<param_width7>,  %<pp8>, %<param_width8>,  %<pp9>, %<param_width9>,  %<pp10>, %<param_width10>,  %<pp11>, %<param_width11>,  %<pp12>, %<param_width12>, %<pp13>, %<param_width13>);

  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%     
%%
%function Update(block, system) Output
    /* S-Function "BBB_Driver_Compass_HMC5883L_wrapper" Block: %<Name> */
   
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  
   
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]  
  %if (param_width1) > 1  
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else  
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif 
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]  
  %if (param_width2) > 1  
   %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else  
   %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif 
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]  
  %if (param_width3) > 1  
   %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else  
   %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif 
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]  
  %if (param_width4) > 1  
   %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else  
   %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif 
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]  
  %if (param_width5) > 1  
   %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else  
   %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif 
  %assign nelements6 = LibBlockParameterSize(P6)
  %assign param_width6 = nelements6[0] * nelements6[1]  
  %if (param_width6) > 1  
   %assign pp6 = LibBlockMatrixParameterBaseAddr(P6)
  %else  
   %assign pp6 = LibBlockParameterAddr(P6, "", "", 0)
  %endif 
  %assign nelements7 = LibBlockParameterSize(P7)
  %assign param_width7 = nelements7[0] * nelements7[1]  
  %if (param_width7) > 1  
   %assign pp7 = LibBlockMatrixParameterBaseAddr(P7)
  %else  
   %assign pp7 = LibBlockParameterAddr(P7, "", "", 0)
  %endif 
  %assign nelements8 = LibBlockParameterSize(P8)
  %assign param_width8 = nelements8[0] * nelements8[1]  
  %if (param_width8) > 1  
   %assign pp8 = LibBlockMatrixParameterBaseAddr(P8)
  %else  
   %assign pp8 = LibBlockParameterAddr(P8, "", "", 0)
  %endif 
  %assign nelements9 = LibBlockParameterSize(P9)
  %assign param_width9 = nelements9[0] * nelements9[1]  
  %if (param_width9) > 1  
   %assign pp9 = LibBlockMatrixParameterBaseAddr(P9)
  %else  
   %assign pp9 = LibBlockParameterAddr(P9, "", "", 0)
  %endif 
  %assign nelements10 = LibBlockParameterSize(P10)
  %assign param_width10 = nelements10[0] * nelements10[1]  
  %if (param_width10) > 1  
   %assign pp10 = LibBlockMatrixParameterBaseAddr(P10)
  %else  
   %assign pp10 = LibBlockParameterAddr(P10, "", "", 0)
  %endif 
  %assign nelements11 = LibBlockParameterSize(P11)
  %assign param_width11 = nelements11[0] * nelements11[1]  
  %if (param_width11) > 1  
   %assign pp11 = LibBlockMatrixParameterBaseAddr(P11)
  %else  
   %assign pp11 = LibBlockParameterAddr(P11, "", "", 0)
  %endif 
  %assign nelements12 = LibBlockParameterSize(P12)
  %assign param_width12 = nelements12[0] * nelements12[1]  
  %if (param_width12) > 1  
   %assign pp12 = LibBlockMatrixParameterBaseAddr(P12)
  %else  
   %assign pp12 = LibBlockParameterAddr(P12, "", "", 0)
  %endif 
  %assign nelements13 = LibBlockParameterSize(P13)
  %assign param_width13 = nelements13[0] * nelements13[1]  
  %if (param_width13) > 1  
   %assign pp13 = LibBlockMatrixParameterBaseAddr(P13)
  %else  
   %assign pp13 = LibBlockParameterAddr(P13, "", "", 0)
  %endif
 
  BBB_Driver_Compass_HMC5883L_Update_wrapper( %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>, %<pp6>, %<param_width6>, %<pp7>, %<param_width7>, %<pp8>, %<param_width8>, %<pp9>, %<param_width9>, %<pp10>, %<param_width10>, %<pp11>, %<param_width11>, %<pp12>, %<param_width12>, %<pp13>, %<param_width13>);
  

  %%
%endfunction 
%% [EOF] BBB_Driver_Compass_HMC5883L.tlc





